<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Huawei_LiteOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Huawei_LiteOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun May 13 23:02:45 2018
<BR><P>
<H3>Maximum Stack Usage =       5428 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cloud_test &rArr; subscribe_publish_sensor_values &rArr; aws_iot_mqtt_yield &rArr; _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[125]">LOS_StartToRun</a>
 <LI><a href="#[41c]">LOS_IntNumGet</a>
 <LI><a href="#[dc]">LOS_IntLock</a>
 <LI><a href="#[4b8]">LOS_IntUnLock</a>
 <LI><a href="#[dd]">LOS_IntRestore</a>
 <LI><a href="#[11b]">osTaskSchedule</a>
 <LI><a href="#[3]">osPendSV</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1ae]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[402]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[402]">x509_crt_verify_child</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ETH_link_callback</a> from lan8742a.o(i.ETH_link_callback) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[20]">GetPinStateOfKey1</a> from bsp_key.o(i.GetPinStateOfKey1) referenced from main.o(i.hardware_init)
 <LI><a href="#[21]">GetPinStateOfKey2</a> from bsp_key.o(i.GetPinStateOfKey2) referenced from main.o(i.hardware_init)
 <LI><a href="#[17]">LwIP_DHCP_task</a> from netconf.o(i.LwIP_DHCP_task) referenced from main.o(i.creat_task3)
 <LI><a href="#[53]">MQTTcallbackHandler</a> from aws_subscribe_publish_sensor_values.o(i.MQTTcallbackHandler) referenced from aws_subscribe_publish_sensor_values.o(i.subscribe_publish_sensor_values)
 <LI><a href="#[1]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[1]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[6]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[22]">TIM3_IRQHandler</a> from main.o(i.TIM3_IRQHandler) referenced from main.o(i.hardware_init)
 <LI><a href="#[7]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[28]">_iot_tls_verify_cert</a> from aws_network_st_wrapper.o(i._iot_tls_verify_cert) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[9]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[13]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[13]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[14]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[57]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[5a]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[5b]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[59]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[58]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[15]">arp_timer</a> from timers.o(i.arp_timer) referenced 2 times from timers.o(i.arp_timer)
 <LI><a href="#[16]">arp_timer</a> from ethernetif.o(i.arp_timer) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[15]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[4]">calloc</a> from calloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[5f]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(i.ccm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[60]">ccm_ctx_alloc</a> from cipher_wrap.o(i.ccm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[61]">ccm_ctx_free</a> from cipher_wrap.o(i.ccm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[18]">cloud_test</a> from main.o(i.cloud_test) referenced from main.o(i.creat_task4)
 <LI><a href="#[67]">des3_crypt_ecb_wrap</a> from cipher_wrap.o(i.des3_crypt_ecb_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[6a]">des3_ctx_alloc</a> from cipher_wrap.o(i.des3_ctx_alloc) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[6b]">des3_ctx_free</a> from cipher_wrap.o(i.des3_ctx_free) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[69]">des3_set2key_dec_wrap</a> from cipher_wrap.o(i.des3_set2key_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[68]">des3_set2key_enc_wrap</a> from cipher_wrap.o(i.des3_set2key_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6d]">des3_set3key_dec_wrap</a> from cipher_wrap.o(i.des3_set3key_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6c]">des3_set3key_enc_wrap</a> from cipher_wrap.o(i.des3_set3key_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[62]">des_crypt_ecb_wrap</a> from cipher_wrap.o(i.des_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[65]">des_ctx_alloc</a> from cipher_wrap.o(i.des_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[66]">des_ctx_free</a> from cipher_wrap.o(i.des_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[64]">des_setkey_dec_wrap</a> from cipher_wrap.o(i.des_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[63]">des_setkey_enc_wrap</a> from cipher_wrap.o(i.des_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[19]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[1a]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.dhcp_timer_coarse)
 <LI><a href="#[1a]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[1b]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.dhcp_timer_fine)
 <LI><a href="#[1b]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[52]">disconnectCallbackHandler</a> from aws_subscribe_publish_sensor_values.o(i.disconnectCallbackHandler) referenced from aws_subscribe_publish_sensor_values.o(i.subscribe_publish_sensor_values)
 <LI><a href="#[1c]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_init)
 <LI><a href="#[1d]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.dns_timer)
 <LI><a href="#[1d]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[b0]">ecdsa_alloc_wrap</a> from pk_wrap.o(i.ecdsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ad]">ecdsa_can_do</a> from pk_wrap.o(i.ecdsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[b1]">ecdsa_free_wrap</a> from pk_wrap.o(i.ecdsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[af]">ecdsa_sign_wrap</a> from pk_wrap.o(i.ecdsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ae]">ecdsa_verify_wrap</a> from pk_wrap.o(i.ecdsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a9]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[a5]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a8]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[ab]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[aa]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[a4]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[a7]">eckey_sign_wrap</a> from pk_wrap.o(i.eckey_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a6]">eckey_verify_wrap</a> from pk_wrap.o(i.eckey_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ac]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[34]">ecp_mod_p192</a> from ecp_curves.o(i.ecp_mod_p192) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[39]">ecp_mod_p192k1</a> from ecp_curves.o(i.ecp_mod_p192k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[35]">ecp_mod_p224</a> from ecp_curves.o(i.ecp_mod_p224) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[3a]">ecp_mod_p224k1</a> from ecp_curves.o(i.ecp_mod_p224k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[3c]">ecp_mod_p255</a> from ecp_curves.o(i.ecp_mod_p255) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[36]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[3b]">ecp_mod_p256k1</a> from ecp_curves.o(i.ecp_mod_p256k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[37]">ecp_mod_p384</a> from ecp_curves.o(i.ecp_mod_p384) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[38]">ecp_mod_p521</a> from ecp_curves.o(i.ecp_mod_p521) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[1e]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[10]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[32]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(i.low_level_init)
 <LI><a href="#[12]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[12]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5]">free</a> from malloc1.o(i.__free$1region) referenced 2 times from platform.o(.data)
 <LI><a href="#[5c]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[5d]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[5e]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2c]">iot_tls_connect</a> from aws_network_st_wrapper.o(i.iot_tls_connect) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[31]">iot_tls_destroy</a> from aws_network_st_wrapper.o(i.iot_tls_destroy) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[2f]">iot_tls_disconnect</a> from aws_network_st_wrapper.o(i.iot_tls_disconnect) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[30]">iot_tls_is_connected</a> from aws_network_st_wrapper.o(i.iot_tls_is_connected) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[2d]">iot_tls_read</a> from aws_network_st_wrapper.o(i.iot_tls_read) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[2e]">iot_tls_write</a> from aws_network_st_wrapper.o(i.iot_tls_write) referenced from aws_network_st_wrapper.o(i.iot_tls_init)
 <LI><a href="#[c]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[24]">liteoscalloc</a> from mem_manage.o(i.liteoscalloc) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[24]">liteoscalloc</a> from mem_manage.o(i.liteoscalloc) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[23]">liteosfree</a> from mem_manage.o(i.liteosfree) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[23]">liteosfree</a> from mem_manage.o(i.liteosfree) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[1f]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[8]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[29]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[29]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[27]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[27]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[26]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(i.mbedtls_hardware_poll) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[26]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(i.mbedtls_hardware_poll) referenced from entropy.o(i.mbedtls_entropy_init)
 <LI><a href="#[26]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(i.mbedtls_hardware_poll) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[33]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(i.mbedtls_hmac_drbg_random) referenced from ecdsa.o(i.mbedtls_ecdsa_sign_det)
 <LI><a href="#[71]">mbedtls_md5</a> from md5.o(i.mbedtls_md5) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2a]">mbedtls_net_recv</a> from mbedtls_net.o(i.mbedtls_net_recv) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[2a]">mbedtls_net_recv</a> from mbedtls_net.o(i.mbedtls_net_recv) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[4b]">mbedtls_net_recv_blocking</a> from mbedtls_net.o(i.mbedtls_net_recv_blocking) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[2b]">mbedtls_net_send</a> from mbedtls_net.o(i.mbedtls_net_send) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[2b]">mbedtls_net_send</a> from mbedtls_net.o(i.mbedtls_net_send) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[79]">mbedtls_ripemd160</a> from ripemd160.o(i.mbedtls_ripemd160) referenced from md_wrap.o(.constdata)
 <LI><a href="#[81]">mbedtls_sha1</a> from sha1.o(i.mbedtls_sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[74]">md5_clone_wrap</a> from md_wrap.o(i.md5_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[72]">md5_ctx_alloc</a> from md_wrap.o(i.md5_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[73]">md5_ctx_free</a> from md_wrap.o(i.md5_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[70]">md5_finish_wrap</a> from md_wrap.o(i.md5_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[75]">md5_process_wrap</a> from md_wrap.o(i.md5_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[6e]">md5_starts_wrap</a> from md_wrap.o(i.md5_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[6f]">md5_update_wrap</a> from md_wrap.o(i.md5_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[25]">my_debug</a> from aws_network_st_wrapper.o(i.my_debug) referenced from aws_network_st_wrapper.o(i.iot_tls_connect)
 <LI><a href="#[4a]">my_debug</a> from net_tls_mbedtls.o(i.my_debug) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[48]">net_sock_close_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_close_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[49]">net_sock_destroy_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_destroy_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[45]">net_sock_open_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_open_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[46]">net_sock_recv_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_recv_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[47]">net_sock_send_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_send_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[2]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced 16 times from los_hwi.o(.vector.bss)
 <LI><a href="#[2]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[2]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.osHwiInit)
 <LI><a href="#[e]">osIdleTask</a> from los_init.o(i.osIdleTask) referenced from los_task.o(i.LOS_TaskCreateOnly)
 <LI><a href="#[e]">osIdleTask</a> from los_init.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[d]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[d]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[3]">osPendSV</a> from los_dispatch_keil.o(.text) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[4c]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[50]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[4f]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[4d]">osTaskSwitchCheck</a> from los_task.o(i.osTaskSwitchCheck) referenced from los_task.o(i.osTaskMonInit)
 <LI><a href="#[4e]">osTickHandler</a> from los_tick.o(i.osTickHandler) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[7c]">ripemd160_clone_wrap</a> from md_wrap.o(i.ripemd160_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7a]">ripemd160_ctx_alloc</a> from md_wrap.o(i.ripemd160_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7b]">ripemd160_ctx_free</a> from md_wrap.o(i.ripemd160_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[78]">ripemd160_finish_wrap</a> from md_wrap.o(i.ripemd160_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7d]">ripemd160_process_wrap</a> from md_wrap.o(i.ripemd160_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[76]">ripemd160_starts_wrap</a> from md_wrap.o(i.ripemd160_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[77]">ripemd160_update_wrap</a> from md_wrap.o(i.ripemd160_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a1]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9b]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a0]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a3]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9e]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9f]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a2]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9a]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9d]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9c]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[84]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[82]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[83]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[80]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[85]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7e]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7f]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8c]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8a]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8b]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[88]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8d]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[86]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[87]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[89]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8e]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8f]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[96]">sha384_clone_wrap</a> from md_wrap.o(i.sha384_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[94]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[95]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[92]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[97]">sha384_process_wrap</a> from md_wrap.o(i.sha384_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[90]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[91]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[93]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[98]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[99]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[42]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[3f]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[41]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[3e]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[44]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[43]">ssl_update_checksum_sha384</a> from ssl_tls.o(i.ssl_update_checksum_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[51]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_params_init)
 <LI><a href="#[54]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[f]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[55]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[55]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[56]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[40]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[3d]">tls_prf_sha384</a> from ssl_tls.o(i.tls_prf_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_startup_keil.o(RESET))
<BR>[Address Reference Count : 2]<UL><LI> los_startup_keil.o(RESET)
<LI> los_hwi.o(.vector.bss)
</UL>
<P><STRONG><a name="[7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4b2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[b2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4b4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4b5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4b6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4b7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[125]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[41c]"></a>LOS_IntNumGet</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[dc]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskExit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[4b8]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[11b]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[3]"></a>osPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> los_hwi.o(.vector.bss)
</UL>
<P><STRONG><a name="[b4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b9]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[4ba]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTcallbackHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_clone
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[4bb]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4bd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapInit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[4bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13a]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTcallbackHandler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[13c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTcallbackHandler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[416]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[260]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pkcs12_pbe_alg_from_asn1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[13b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTcallbackHandler
</UL>

<P><STRONG><a name="[177]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>

<P><STRONG><a name="[4]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[bd]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[cf]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[bf]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4c1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4c2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[bc]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[9]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4c3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4c5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[c7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4c6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>CLOUD_Error_Handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cloud.o(i.CLOUD_Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOUD_Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[d2]"></a>Debug_USART_Config</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bsp_debug_usart.o(i.Debug_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[da]"></a>Delay10ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dwt.o(i.Delay10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Delay10ms &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26c]"></a>DelayInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dwt.o(i.DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[db]"></a>Delayus</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dwt.o(i.Delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10ms
</UL>

<P><STRONG><a name="[de]"></a>ETH_BSP_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_BSP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ETH_BSP_Config &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[ef]"></a>ETH_DMAITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[f4]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2aa]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f429_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2ab]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMARxDescReceiveITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[f3]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2a9]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2ac]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMATxDescChecksumInsertionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[e2]"></a>ETH_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[e5]"></a>ETH_Delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>

<P><STRONG><a name="[e4]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[ed]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[2ae]"></a>ETH_Get_Received_Frame_interrupt</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_Get_Received_Frame_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Get_Received_Frame_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[e9]"></a>ETH_Init</STRONG> (Thumb, 762 bytes, Stack size 56 bytes, stm32f429_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[2a8]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[f0]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACReceptionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[f1]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2af]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f429_eth.o(i.ETH_Prepare_Transmit_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[e1]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[ec]"></a>ETH_SoftwareReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[f2]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f429_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[f5]"></a>ETH_Stop</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f429_eth.o(i.ETH_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Stop &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
</UL>

<P><STRONG><a name="[ee]"></a>ETH_StructInit</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[eb]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f429_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[11]"></a>ETH_link_callback</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lan8742a.o(i.ETH_link_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ETH_link_callback &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[d6]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2_GPIO_Config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_GPIO_Config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[fa]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinStateOfKey2
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinStateOfKey1
</UL>

<P><STRONG><a name="[e7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[20]"></a>GetPinStateOfKey1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_key.o(i.GetPinStateOfKey1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPinStateOfKey1
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hardware_init)
</UL>
<P><STRONG><a name="[21]"></a>GetPinStateOfKey2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_key.o(i.GetPinStateOfKey2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPinStateOfKey2
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hardware_init)
</UL>
<P><STRONG><a name="[fb]"></a>Key1_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_key.o(i.Key1_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key1_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[fc]"></a>Key2_GPIO_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_key.o(i.Key2_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key2_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[26b]"></a>KeyCreate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_key.o(i.KeyCreate))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[fd]"></a>LED_GPIO_Config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[12a]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[11f]"></a>LOS_ErrHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, los_err.o(i.LOS_ErrHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[fe]"></a>LOS_HeapAlloc</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, los_heap.o(i.LOS_HeapAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[101]"></a>LOS_HeapFree</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, los_heap.o(i.LOS_HeapFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LOS_HeapFree &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[102]"></a>LOS_HeapInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, los_heap.o(i.LOS_HeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOS_HeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[103]"></a>LOS_HwiCreate</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, los_hwi.o(i.LOS_HwiCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_HwiCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[104]"></a>LOS_KernelInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, los_init.o(i.LOS_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>LOS_MemAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liteoscalloc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[10a]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[10b]"></a>LOS_MemFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapFree
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liteosfree
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[10d]"></a>LOS_MemInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[10f]"></a>LOS_QueueCreate</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[112]"></a>LOS_QueueRead</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, los_queue.o(i.LOS_QueueRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_QueueRead &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[113]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_queue.o(i.LOS_QueueReadCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[116]"></a>LOS_QueueWrite</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, los_queue.o(i.LOS_QueueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWrite &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[117]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueWriteCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
</UL>

<P><STRONG><a name="[119]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>

<P><STRONG><a name="[11c]"></a>LOS_SemCreate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[11e]"></a>LOS_SemPend</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_test
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[121]"></a>LOS_SemPost</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[124]"></a>LOS_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_init.o(i.LOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_task4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_task3
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[127]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[12e]"></a>LOS_TaskDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[12f]"></a>LOS_TaskYield</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
</UL>

<P><STRONG><a name="[1b4]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_ms
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
</UL>

<P><STRONG><a name="[17]"></a>LwIP_DHCP_task</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, netconf.o(i.LwIP_DHCP_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LwIP_DHCP_task &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.creat_task3)
</UL>
<P><STRONG><a name="[134]"></a>LwIP_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>MQTTcallbackHandler</STRONG> (Thumb, 134 bytes, Stack size 144 bytes, aws_subscribe_publish_sensor_values.o(i.MQTTcallbackHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = MQTTcallbackHandler &rArr; aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_subscribe_publish_sensor_values.o(i.subscribe_publish_sensor_values)
</UL>
<P><STRONG><a name="[158]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
</UL>

<P><STRONG><a name="[146]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[d3]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2_GPIO_Config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_GPIO_Config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[e3]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[13f]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
</UL>

<P><STRONG><a name="[145]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
</UL>

<P><STRONG><a name="[d4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[ea]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[148]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[147]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[14a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[149]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[140]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
</UL>

<P><STRONG><a name="[13e]"></a>RNG_Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_rng.o(i.RNG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RNG_Config &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[141]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[143]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[142]"></a>RNG_Get_RandomNum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_rng.o(i.RNG_Get_RandomNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RNG_Get_RandomNum &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[144]"></a>RTC_CLK_Config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_rtc.o(i.RTC_CLK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_CLK_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[14d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14e]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14c]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[14f]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[152]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[14b]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[e6]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[6]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hardware_init)
</UL>
<P><STRONG><a name="[15a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
</UL>

<P><STRONG><a name="[159]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
</UL>

<P><STRONG><a name="[155]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
</UL>

<P><STRONG><a name="[d9]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[d8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[265]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[d7]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[264]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[15b]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c8]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[413]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_debug
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_debug
</UL>

<P><STRONG><a name="[4c9]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[4ca]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[15d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4cb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_disconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
</UL>

<P><STRONG><a name="[4cc]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4cd]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[15e]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4ce]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a7]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[4cf]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4d0]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[15f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d1]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[472]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
</UL>

<P><STRONG><a name="[4d2]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4d3]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[160]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d4]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4d5]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4d6]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2e1]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4d7]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc1.o(i.__free$1region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc1.o(i.__malloc$1region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[4d8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4d9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[179]"></a>_aws_iot_mqtt_internal_disconnect</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_mqtt_internal_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[27d]"></a>_iot_tls_set_connect_params</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, aws_network_st_wrapper.o(i._iot_tls_set_connect_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _iot_tls_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_init
</UL>

<P><STRONG><a name="[1ff]"></a>aws_iot_is_autoreconnect_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(i.aws_iot_is_autoreconnect_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectCallbackHandler
</UL>

<P><STRONG><a name="[16b]"></a>aws_iot_mqtt_attempt_reconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, aws_iot_mqtt_client_connect.o(i.aws_iot_mqtt_attempt_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectCallbackHandler
</UL>

<P><STRONG><a name="[471]"></a>aws_iot_mqtt_autoreconnect_set_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_autoreconnect_set_status))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
</UL>

<P><STRONG><a name="[1a2]"></a>aws_iot_mqtt_connect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aws_iot_mqtt_client_connect.o(i.aws_iot_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aws_iot_mqtt_connect &rArr; _aws_iot_mqtt_internal_connect &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_is_client_state_valid_for_connect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
</UL>

<P><STRONG><a name="[167]"></a>aws_iot_mqtt_disconnect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aws_iot_mqtt_client_connect.o(i.aws_iot_mqtt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
</UL>

<P><STRONG><a name="[176]"></a>aws_iot_mqtt_get_client_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_get_client_state))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
</UL>

<P><STRONG><a name="[17f]"></a>aws_iot_mqtt_get_next_packet_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_get_next_packet_id))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[1a5]"></a>aws_iot_mqtt_init</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aws_iot_mqtt_init &rArr; iot_tls_init &rArr; _iot_tls_set_connect_params
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
</UL>

<P><STRONG><a name="[190]"></a>aws_iot_mqtt_internal_cycle_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_cycle_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
</UL>

<P><STRONG><a name="[163]"></a>aws_iot_mqtt_internal_decode_remaining_length_from_buffer</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_decode_remaining_length_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[181]"></a>aws_iot_mqtt_internal_deserialize_ack</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, aws_iot_mqtt_client_publish.o(i.aws_iot_mqtt_internal_deserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aws_iot_mqtt_internal_deserialize_ack &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[17c]"></a>aws_iot_mqtt_internal_deserialize_publish</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, aws_iot_mqtt_client_publish.o(i.aws_iot_mqtt_internal_deserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_read_string_with_len
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[188]"></a>aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[189]"></a>aws_iot_mqtt_internal_init_header</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_init_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aws_iot_mqtt_internal_init_header
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
</UL>

<P><STRONG><a name="[162]"></a>aws_iot_mqtt_internal_read_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_read_char))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[165]"></a>aws_iot_mqtt_internal_read_uint16_t</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_read_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_read_string_with_len
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[172]"></a>aws_iot_mqtt_internal_send_packet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aws_iot_mqtt_internal_send_packet &rArr; has_timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[17d]"></a>aws_iot_mqtt_internal_serialize_ack</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, aws_iot_mqtt_client_publish.o(i.aws_iot_mqtt_internal_serialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aws_iot_mqtt_internal_serialize_ack &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[17a]"></a>aws_iot_mqtt_internal_serialize_zero</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_serialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
</UL>

<P><STRONG><a name="[173]"></a>aws_iot_mqtt_internal_wait_for_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_wait_for_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[18a]"></a>aws_iot_mqtt_internal_write_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_write_char))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
</UL>

<P><STRONG><a name="[184]"></a>aws_iot_mqtt_internal_write_len_to_buffer</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_write_len_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[18c]"></a>aws_iot_mqtt_internal_write_uint_16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_write_uint_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
</UL>

<P><STRONG><a name="[18b]"></a>aws_iot_mqtt_internal_write_utf8_string</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aws_iot_mqtt_client_common_internal.o(i.aws_iot_mqtt_internal_write_utf8_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[1a1]"></a>aws_iot_mqtt_is_client_connected</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_is_client_connected))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
</UL>

<P><STRONG><a name="[13d]"></a>aws_iot_mqtt_publish</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, aws_iot_mqtt_client_publish.o(i.aws_iot_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTcallbackHandler
</UL>

<P><STRONG><a name="[1a3]"></a>aws_iot_mqtt_resubscribe</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_mqtt_client_subscribe.o(i.aws_iot_mqtt_resubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
</UL>

<P><STRONG><a name="[16c]"></a>aws_iot_mqtt_set_client_state</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_set_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_set_client_state
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>

<P><STRONG><a name="[16f]"></a>aws_iot_mqtt_set_connect_params</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, aws_iot_mqtt_client.o(i.aws_iot_mqtt_set_connect_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aws_iot_mqtt_set_connect_params &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
</UL>

<P><STRONG><a name="[1a8]"></a>aws_iot_mqtt_subscribe</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, aws_iot_mqtt_client_subscribe.o(i.aws_iot_mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
</UL>

<P><STRONG><a name="[1a9]"></a>aws_iot_mqtt_yield</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, aws_iot_mqtt_client_yield.o(i.aws_iot_mqtt_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = aws_iot_mqtt_yield &rArr; _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
</UL>

<P><STRONG><a name="[18]"></a>cloud_test</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.cloud_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 5428 + Unknown Stack Size
<LI>Call Chain = cloud_test &rArr; subscribe_publish_sensor_values &rArr; aws_iot_mqtt_yield &rArr; _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_publish_sensor_values
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.creat_task4)
</UL>
<P><STRONG><a name="[16d]"></a>countdown_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aws_timer.o(i.countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[174]"></a>countdown_sec</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aws_timer.o(i.countdown_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown_sec
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>

<P><STRONG><a name="[1b5]"></a>creat_task3</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, main.o(i.creat_task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = creat_task3 &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>creat_task4</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, main.o(i.creat_task4))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = creat_task4 &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>dhcp_arp_reply</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1db]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[1ec]"></a>dhcp_fine_tmr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[1f7]"></a>dhcp_release</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1f8]"></a>dhcp_renew</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[133]"></a>dhcp_start</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[f8]"></a>dhcp_stop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[203]"></a>dns_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dns_init &rArr; ipaddr_addr &rArr; ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1ef]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[209]"></a>dns_tmr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[254]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[1e]"></a>etharp_output</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1da]"></a>etharp_query</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[25b]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[19f]"></a>etharp_tmr</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[25f]"></a>ethernet_input</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[10]"></a>ethernetif_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; sys_thread_new &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[12]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[26a]"></a>hardware_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = hardware_init &rArr; Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2_GPIO_Config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_GPIO_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>has_timer_expired</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aws_timer.o(i.has_timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = has_timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
</UL>

<P><STRONG><a name="[26d]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[26f]"></a>icmp_input</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[272]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[270]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[170]"></a>init_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_timer.o(i.init_timer))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
</UL>

<P><STRONG><a name="[2c]"></a>iot_tls_connect</STRONG> (Thumb, 994 bytes, Stack size 552 bytes, aws_network_st_wrapper.o(i.iot_tls_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4568 + Unknown Stack Size
<LI>Call Chain = iot_tls_connect &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_set_connect_params
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_verify
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_cert_profile
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[31]"></a>iot_tls_destroy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aws_network_st_wrapper.o(i.iot_tls_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = iot_tls_destroy &rArr; mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[2f]"></a>iot_tls_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, aws_network_st_wrapper.o(i.iot_tls_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = iot_tls_disconnect &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[1a6]"></a>iot_tls_init</STRONG> (Thumb, 74 bytes, Stack size 52 bytes, aws_network_st_wrapper.o(i.iot_tls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iot_tls_init &rArr; _iot_tls_set_connect_params
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
</UL>

<P><STRONG><a name="[30]"></a>iot_tls_is_connected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_network_st_wrapper.o(i.iot_tls_is_connected))
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[2d]"></a>iot_tls_read</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, aws_network_st_wrapper.o(i.iot_tls_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = iot_tls_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[2e]"></a>iot_tls_write</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, aws_network_st_wrapper.o(i.iot_tls_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = iot_tls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_init)
</UL>
<P><STRONG><a name="[258]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[261]"></a>ip_input</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[273]"></a>ip_output</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[271]"></a>ip_output_if</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ip_output_if &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[2a6]"></a>ip_route</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[204]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[2a7]"></a>ipaddr_aton</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, ip_addr.o(i.ipaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[29f]"></a>left_ms</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aws_timer.o(i.left_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = left_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
</UL>

<P><STRONG><a name="[24]"></a>liteoscalloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mem_manage.o(i.liteoscalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = liteoscalloc &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[23]"></a>liteosfree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mem_manage.o(i.liteosfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = liteosfree &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy_mbedtls
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[1e0]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[205]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[2b0]"></a>lwip_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[1e3]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2a2]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[2b5]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = main &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10ms
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_task4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_task3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[19a]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[19c]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[19b]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[19d]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[19e]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[2bc]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[2c0]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[2c1]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
</UL>

<P><STRONG><a name="[2c2]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[2c3]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[2c4]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crl_get_version
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[2bf]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[2c5]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[2c6]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[2bd]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_ext
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_entry_ext
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[20f]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1write.o(i.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[20e]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[210]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn1write.o(i.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[34a]"></a>mbedtls_base64_decode</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[2c8]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, ccm.o(i.mbedtls_ccm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[2ca]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, ccm.o(i.mbedtls_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[1b0]"></a>mbedtls_ccm_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccm.o(i.mbedtls_ccm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
</UL>

<P><STRONG><a name="[1af]"></a>mbedtls_ccm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ccm.o(i.mbedtls_ccm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
</UL>

<P><STRONG><a name="[1ac]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ccm.o(i.mbedtls_ccm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[2cf]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, cipher.o(i.mbedtls_cipher_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[2d1]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[2d3]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[2d6]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[2cb]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[369]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[2cc]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>

<P><STRONG><a name="[2d8]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[2d5]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[2d4]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[2ce]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[2cd]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[1ae]"></a>mbedtls_cipher_update</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[27b]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[280]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[29]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[2db]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[2dc]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 118 bytes, Stack size 408 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[287]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[2dd]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[2de]"></a>mbedtls_debug_print_buf</STRONG> (Thumb, 298 bytes, Stack size 576 bytes, debug.o(i.mbedtls_debug_print_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[2df]"></a>mbedtls_debug_print_crt</STRONG> (Thumb, 162 bytes, Stack size 1576 bytes, debug.o(i.mbedtls_debug_print_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824<LI>Call Chain = mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[1bd]"></a>mbedtls_debug_print_ecp</STRONG> (Thumb, 120 bytes, Stack size 552 bytes, debug.o(i.mbedtls_debug_print_ecp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[1bc]"></a>mbedtls_debug_print_mpi</STRONG> (Thumb, 376 bytes, Stack size 568 bytes, debug.o(i.mbedtls_debug_print_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[2e0]"></a>mbedtls_debug_print_msg</STRONG> (Thumb, 112 bytes, Stack size 544 bytes, debug.o(i.mbedtls_debug_print_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[2e2]"></a>mbedtls_debug_print_ret</STRONG> (Thumb, 96 bytes, Stack size 552 bytes, debug.o(i.mbedtls_debug_print_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_debug_print_ret &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[283]"></a>mbedtls_debug_set_threshold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i.mbedtls_debug_set_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[1c3]"></a>mbedtls_des3_crypt_ecb</STRONG> (Thumb, 1158 bytes, Stack size 28 bytes, des.o(i.mbedtls_des3_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[1c5]"></a>mbedtls_des3_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, des.o(i.mbedtls_des3_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_des3_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_free
</UL>

<P><STRONG><a name="[1c4]"></a>mbedtls_des3_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, des.o(i.mbedtls_des3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_des3_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_alloc
</UL>

<P><STRONG><a name="[1c8]"></a>mbedtls_des3_set2key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(i.mbedtls_des3_set2key_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set2key_dec &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec_wrap
</UL>

<P><STRONG><a name="[1c9]"></a>mbedtls_des3_set2key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(i.mbedtls_des3_set2key_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set2key_enc &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc_wrap
</UL>

<P><STRONG><a name="[1cb]"></a>mbedtls_des3_set3key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(i.mbedtls_des3_set3key_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec_wrap
</UL>

<P><STRONG><a name="[1cc]"></a>mbedtls_des3_set3key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(i.mbedtls_des3_set3key_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set3key_enc &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc_wrap
</UL>

<P><STRONG><a name="[1cd]"></a>mbedtls_des_crypt_ecb</STRONG> (Thumb, 564 bytes, Stack size 28 bytes, des.o(i.mbedtls_des_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[1cf]"></a>mbedtls_des_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, des.o(i.mbedtls_des_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_des_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_free
</UL>

<P><STRONG><a name="[1ce]"></a>mbedtls_des_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, des.o(i.mbedtls_des_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_des_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_alloc
</UL>

<P><STRONG><a name="[1c7]"></a>mbedtls_des_setkey</STRONG> (Thumb, 784 bytes, Stack size 20 bytes, des.o(i.mbedtls_des_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
</UL>

<P><STRONG><a name="[1d0]"></a>mbedtls_des_setkey_dec</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, des.o(i.mbedtls_des_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec_wrap
</UL>

<P><STRONG><a name="[1d1]"></a>mbedtls_des_setkey_enc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, des.o(i.mbedtls_des_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_enc_wrap
</UL>

<P><STRONG><a name="[2e4]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[2e5]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[2e9]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[2ea]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[2ec]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[2ed]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[2ef]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[20b]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(i.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[215]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(i.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[20a]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(i.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[211]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[2f4]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 466 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[2f5]"></a>mbedtls_ecdsa_sign_det</STRONG> (Thumb, 182 bytes, Stack size 304 bytes, ecdsa.o(i.mbedtls_ecdsa_sign_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[2f3]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 376 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[20c]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[2fb]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[213]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[2e6]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[218]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[2fe]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[300]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[2ff]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_list))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>

<P><STRONG><a name="[2eb]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, ecp.o(i.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[2f2]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[24d]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[2fd]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[302]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[304]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[2e8]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[214]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
</UL>

<P><STRONG><a name="[212]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[2e7]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ecp.o(i.mbedtls_ecp_muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[23e]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[23f]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[306]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[307]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[21e]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[2f0]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[2f1]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[2ee]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[286]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, entropy.o(i.mbedtls_entropy_add_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[27c]"></a>mbedtls_entropy_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, entropy.o(i.mbedtls_entropy_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[27]"></a>mbedtls_entropy_func</STRONG> (Thumb, 232 bytes, Stack size 104 bytes, entropy.o(i.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[285]"></a>mbedtls_entropy_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[2d0]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gcm.o(i.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[2d2]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[30d]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, gcm.o(i.mbedtls_gcm_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[268]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[267]"></a>mbedtls_gcm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[266]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[30c]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[2d9]"></a>mbedtls_gcm_update</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[26]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, entropy_hardware_poll.o(i.mbedtls_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_hardware_poll &rArr; RNG_Get_RandomNum &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> entropy.o(i.mbedtls_entropy_init)
<LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[2f9]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[2f7]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_hmac_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[33]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(i.mbedtls_ecdsa_sign_det)
</UL>
<P><STRONG><a name="[311]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[313]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 100 bytes, Stack size 408 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[2f8]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_seed_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[314]"></a>mbedtls_hmac_drbg_update</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[2ba]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[2b9]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[366]"></a>mbedtls_md</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[71]"></a>mbedtls_md5</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, md5.o(i.mbedtls_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[320]"></a>mbedtls_md5_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md5.o(i.mbedtls_md5_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
</UL>

<P><STRONG><a name="[31e]"></a>mbedtls_md5_finish</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, md5.o(i.mbedtls_md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
</UL>

<P><STRONG><a name="[31f]"></a>mbedtls_md5_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md5.o(i.mbedtls_md5_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md5_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
</UL>

<P><STRONG><a name="[31b]"></a>mbedtls_md5_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md5.o(i.mbedtls_md5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
</UL>

<P><STRONG><a name="[322]"></a>mbedtls_md5_process</STRONG> (Thumb, 2220 bytes, Stack size 84 bytes, md5.o(i.mbedtls_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
</UL>

<P><STRONG><a name="[31c]"></a>mbedtls_md5_starts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_starts))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
</UL>

<P><STRONG><a name="[31d]"></a>mbedtls_md5_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
</UL>

<P><STRONG><a name="[365]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[30f]"></a>mbedtls_md_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[40a]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[312]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[317]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[315]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[319]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[316]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[2f6]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[361]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[318]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[363]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[364]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[22f]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>

<P><STRONG><a name="[324]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[21c]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[22d]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[325]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[217]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[1c1]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[221]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[327]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[328]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1146 bytes, Stack size 176 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[24a]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 1048 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[222]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[32d]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[228]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[230]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
</UL>

<P><STRONG><a name="[219]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[247]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[32e]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[241]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[237]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[21f]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[21a]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[1bf]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[24c]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
</UL>

<P><STRONG><a name="[23a]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[245]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_safe_cond_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_swap &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[236]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_set_bit &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[22a]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[1c0]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[249]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[224]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[220]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[226]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[1c2]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[2c7]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[2a]"></a>mbedtls_net_recv</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mbedtls_net.o(i.mbedtls_net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_net_recv &rArr; net_sock_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[4b]"></a>mbedtls_net_recv_blocking</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mbedtls_net.o(i.mbedtls_net_recv_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_net_recv_blocking &rArr; net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[2b]"></a>mbedtls_net_send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mbedtls_net.o(i.mbedtls_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_net_send &rArr; net_sock_send
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[334]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_attr_short_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[336]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_cipher_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_cipher_alg &rArr; oid_cipher_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[338]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[33a]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[33c]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>

<P><STRONG><a name="[38d]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[33e]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[340]"></a>mbedtls_oid_get_pkcs12_pbe_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(i.mbedtls_oid_get_pkcs12_pbe_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_pkcs12_pbe_alg &rArr; oid_pkcs12_pbe_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pkcs12_pbe_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[342]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[344]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_sig_alg_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[345]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[347]"></a>mbedtls_pem_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
</UL>

<P><STRONG><a name="[34e]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
</UL>

<P><STRONG><a name="[349]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
</UL>

<P><STRONG><a name="[35e]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[1bb]"></a>mbedtls_pk_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[46e]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(i.mbedtls_pk_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[277]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[34d]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3fd]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[34f]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[282]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[289]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, pkparse.o(i.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4016<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[355]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[350]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[35a]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[35c]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[35d]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[360]"></a>mbedtls_pkcs12_derivation</STRONG> (Thumb, 468 bytes, Stack size 648 bytes, pkcs12.o(i.mbedtls_pkcs12_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mbedtls_pkcs12_derivation &rArr; pkcs12_fill_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
</UL>

<P><STRONG><a name="[368]"></a>mbedtls_pkcs12_pbe</STRONG> (Thumb, 238 bytes, Stack size 160 bytes, pkcs12.o(i.mbedtls_pkcs12_pbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = mbedtls_pkcs12_pbe &rArr; pkcs12_pbe_derive_key_iv &rArr; mbedtls_pkcs12_derivation &rArr; pkcs12_fill_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[448]"></a>mbedtls_pkcs12_pbe_sha1_rc4_128</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, pkcs12.o(i.mbedtls_pkcs12_pbe_sha1_rc4_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[36b]"></a>mbedtls_pkcs5_pbes2</STRONG> (Thumb, 390 bytes, Stack size 272 bytes, pkcs5.o(i.mbedtls_pkcs5_pbes2))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbedtls_pkcs5_pbes2 &rArr; mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[36d]"></a>mbedtls_pkcs5_pbkdf2_hmac</STRONG> (Thumb, 278 bytes, Stack size 192 bytes, pkcs5.o(i.mbedtls_pkcs5_pbkdf2_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[27e]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[79]"></a>mbedtls_ripemd160</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ripemd160.o(i.mbedtls_ripemd160))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mbedtls_ripemd160 &rArr; mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_starts
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[373]"></a>mbedtls_ripemd160_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ripemd160.o(i.mbedtls_ripemd160_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ripemd160_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_clone_wrap
</UL>

<P><STRONG><a name="[371]"></a>mbedtls_ripemd160_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ripemd160.o(i.mbedtls_ripemd160_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_finish_wrap
</UL>

<P><STRONG><a name="[372]"></a>mbedtls_ripemd160_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ripemd160.o(i.mbedtls_ripemd160_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ripemd160_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_ctx_free
</UL>

<P><STRONG><a name="[36e]"></a>mbedtls_ripemd160_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ripemd160.o(i.mbedtls_ripemd160_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ripemd160_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_ctx_alloc
</UL>

<P><STRONG><a name="[375]"></a>mbedtls_ripemd160_process</STRONG> (Thumb, 7444 bytes, Stack size 100 bytes, ripemd160.o(i.mbedtls_ripemd160_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_ripemd160_process
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_process_wrap
</UL>

<P><STRONG><a name="[36f]"></a>mbedtls_ripemd160_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ripemd160.o(i.mbedtls_ripemd160_starts))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_starts_wrap
</UL>

<P><STRONG><a name="[370]"></a>mbedtls_ripemd160_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ripemd160.o(i.mbedtls_ripemd160_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update_wrap
</UL>

<P><STRONG><a name="[376]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 562 bytes, Stack size 168 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[378]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[377]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[379]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[37a]"></a>mbedtls_rsa_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[37c]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[37f]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[382]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[385]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[388]"></a>mbedtls_rsa_private</STRONG> (Thumb, 688 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[38a]"></a>mbedtls_rsa_public</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[37e]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 458 bytes, Stack size 1168 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[381]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[37d]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 354 bytes, Stack size 1088 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[380]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[383]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 458 bytes, Stack size 80 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[386]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 670 bytes, Stack size 1112 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[384]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 384 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[387]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[35f]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 506 bytes, Stack size 1168 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[37b]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[81]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[393]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[391]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sha1.o(i.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[392]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[38e]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[395]"></a>mbedtls_sha1_process</STRONG> (Thumb, 6420 bytes, Stack size 92 bytes, sha1.o(i.mbedtls_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[38f]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[390]"></a>mbedtls_sha1_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[396]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[39c]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[39a]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[39b]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[397]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[39e]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3532 bytes, Stack size 312 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[398]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[399]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[250]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(i.mbedtls_sha512))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
</UL>

<P><STRONG><a name="[3a1]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha512.o(i.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[309]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 1062 bytes, Stack size 56 bytes, sha512.o(i.mbedtls_sha512_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[3a0]"></a>mbedtls_sha512_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha512.o(i.mbedtls_sha512_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[39f]"></a>mbedtls_sha512_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha512.o(i.mbedtls_sha512_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[3a3]"></a>mbedtls_sha512_process</STRONG> (Thumb, 3594 bytes, Stack size 752 bytes, sha512.o(i.mbedtls_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
</UL>

<P><STRONG><a name="[30a]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, sha512.o(i.mbedtls_sha512_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[251]"></a>mbedtls_sha512_update</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
</UL>

<P><STRONG><a name="[3a4]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_check_cert_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[3d0]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[460]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_sig_hash))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[3b6]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[29c]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_disconnect
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[290]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[292]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[28e]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_cert_profile))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[284]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3aa]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[293]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_conf_own_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[294]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_read_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[291]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3ab]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_transport))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_verify))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[28d]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[27a]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[27f]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3af]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1866 bytes, Stack size 440 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[3b1]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; ssl_check_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[3a7]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_ret &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[279]"></a>mbedtls_ssl_free</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[3b0]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[45d]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[46f]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_frag_len))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[299]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_get_record_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_get_record_expansion &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[29a]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_verify_result))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3b8]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[298]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[3bb]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[3b4]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[3ba]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3128<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[3ca]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[470]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[3ac]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[45e]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_md_alg_from_hash))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[3cc]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_optimize_checksum &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[3be]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 1708 bytes, Stack size 56 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3088<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c8]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c9]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[45f]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_pk_alg_from_sig))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[3b9]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[2a0]"></a>mbedtls_ssl_read</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
</UL>

<P><STRONG><a name="[3cd]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[3d4]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read_record_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[455]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[3d9]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[3a8]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[3b5]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[3db]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[297]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[296]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[295]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3dd]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[450]"></a>mbedtls_ssl_sig_hash_set_const_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_sig_hash_set_const_hash))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[3b3]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[3d5]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[2a1]"></a>mbedtls_ssl_write</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
</UL>

<P><STRONG><a name="[3c2]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2872<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c5]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c6]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3da]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[3e0]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[278]"></a>mbedtls_x509_crl_free</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crl.o(i.mbedtls_x509_crl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_crl_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3e3]"></a>mbedtls_x509_crl_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x509_crl.o(i.mbedtls_x509_crl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3e4]"></a>mbedtls_x509_crl_parse</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, x509_crl.o(i.mbedtls_x509_crl_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mbedtls_x509_crl_parse &rArr; mbedtls_x509_crl_parse_der &rArr; mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3e5]"></a>mbedtls_x509_crl_parse_der</STRONG> (Thumb, 704 bytes, Stack size 80 bytes, x509_crl.o(i.mbedtls_x509_crl_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mbedtls_x509_crl_parse_der &rArr; mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_ext
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crl_get_version
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
</UL>

<P><STRONG><a name="[3a6]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_check_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[3a5]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, x509_crt.o(i.mbedtls_x509_crt_check_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[276]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[196]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 1618 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_verify_cert
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[281]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3f8]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_is_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[288]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3ce]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[29b]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_crt_verify_info &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[3cf]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 3032<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[3f0]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 274 bytes, Stack size 312 bytes, x509.o(i.mbedtls_x509_dn_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3e7]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[403]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[404]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_ext
</UL>

<P><STRONG><a name="[3e9]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[406]"></a>mbedtls_x509_get_rsassa_pss_params</STRONG> (Thumb, 450 bytes, Stack size 72 bytes, x509.o(i.mbedtls_x509_get_rsassa_pss_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[408]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[3ed]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3e8]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3ea]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[3f3]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_key_size_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3ef]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_serial_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3f1]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, x509.o(i.mbedtls_x509_sig_alg_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4a6]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[3f9]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[40b]"></a>mem_free</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[2b2]"></a>mem_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1f9]"></a>mem_malloc</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[410]"></a>mem_trim</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[411]"></a>memp_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2b3]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[412]"></a>memp_malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[29d]"></a>net_sock_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net.o(i.net_sock_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sock_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_disconnect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[48]"></a>net_sock_close_mbedtls</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, net_tls_mbedtls.o(i.net_sock_close_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = net_sock_close_mbedtls &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[28a]"></a>net_sock_create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, net.o(i.net_sock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = net_sock_create &rArr; net_sock_create_mbedtls &rArr; liteoscalloc &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[414]"></a>net_sock_create_mbedtls</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, net_tls_mbedtls.o(i.net_sock_create_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = net_sock_create_mbedtls &rArr; liteoscalloc &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liteosfree
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liteoscalloc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
</UL>

<P><STRONG><a name="[29e]"></a>net_sock_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net.o(i.net_sock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_disconnect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[49]"></a>net_sock_destroy_mbedtls</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, net_tls_mbedtls.o(i.net_sock_destroy_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = net_sock_destroy_mbedtls &rArr; liteosfree &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liteosfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[28c]"></a>net_sock_open</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net.o(i.net_sock_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_sock_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[45]"></a>net_sock_open_mbedtls</STRONG> (Thumb, 1852 bytes, Stack size 568 bytes, net_tls_mbedtls.o(i.net_sock_open_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4584 + Unknown Stack Size
<LI>Call Chain = net_sock_open_mbedtls &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[332]"></a>net_sock_recv</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, net.o(i.net_sock_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_sock_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
</UL>

<P><STRONG><a name="[46]"></a>net_sock_recv_mbedtls</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, net_tls_mbedtls.o(i.net_sock_recv_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = net_sock_recv_mbedtls &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timeout_left_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[333]"></a>net_sock_send</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, net.o(i.net_sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_sock_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[47]"></a>net_sock_send_mbedtls</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, net_tls_mbedtls.o(i.net_sock_send_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = net_sock_send_mbedtls &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timeout_left_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[28b]"></a>net_sock_setopt</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, net.o(i.net_sock_setopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
</UL>

<P><STRONG><a name="[415]"></a>net_timeout_left_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, net.o(i.net_timeout_left_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_timeout_left_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
</UL>

<P><STRONG><a name="[136]"></a>netif_add</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2b4]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f6]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_task
</UL>

<P><STRONG><a name="[137]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[f9]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[1d7]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[1d5]"></a>netif_set_ipaddr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[138]"></a>netif_set_link_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[1d6]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f7]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[100]"></a>osAlarmHeapInfo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, los_heap.o(i.osAlarmHeapInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
</UL>

<P><STRONG><a name="[434]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, los_slab.o(i.osAtomicBitsetClearBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[430]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, los_slab.o(i.osAtomicBitsetFindClearAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[433]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, los_slab.o(i.osAtomicBitsetGetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[432]"></a>osAtomicBitsetGetNumBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetGetNumBits))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[419]"></a>osAtomicBitsetInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, los_slab.o(i.osAtomicBitsetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osAtomicBitsetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[ff]"></a>osHeapPrvGetNext</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, los_heap.o(i.osHeapPrvGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
</UL>

<P><STRONG><a name="[418]"></a>osHeapStatisticsGet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, los_heap.o(i.osHeapStatisticsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[2]"></a>osHwiDefaultHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_hwi.o(i.osHwiDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = osHwiDefaultHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> los_hwi.o(i.LOS_HwiCreate)
<LI> los_hwi.o(i.osHwiInit)
<LI> los_hwi.o(.vector.bss)
</UL>
<P><STRONG><a name="[41f]"></a>osHwiInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, los_hwi.o(i.osHwiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osHwiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[e]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_init.o(i.osIdleTask))
<BR>[Address Reference Count : 2]<UL><LI> los_task.o(i.LOS_TaskCreateOnly)
<LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[41b]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[41a]"></a>osIntNumGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
</UL>

<P><STRONG><a name="[d]"></a>osInterrupt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_hwi.o(i.osInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = osInterrupt &rArr; osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(i.LOS_HwiCreate)
<LI> los_hw_tick.o(i.osTickStart)
</UL>
<P><STRONG><a name="[105]"></a>osMain</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, los_init.o(i.osMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[41e]"></a>osMemSystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[423]"></a>osMuxInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[130]"></a>osPriqueueDequeue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueDequeue))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
</UL>

<P><STRONG><a name="[128]"></a>osPriqueueEnqueue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_priqueue.o(i.osPriqueueEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>

<P><STRONG><a name="[42a]"></a>osPriqueueInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[132]"></a>osPriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[11a]"></a>osPriqueueTop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
</UL>

<P><STRONG><a name="[424]"></a>osQueueInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[115]"></a>osQueueOperate</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, los_queue.o(i.osQueueOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[41d]"></a>osRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_init.o(i.osRegister))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[129]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
</UL>

<P><STRONG><a name="[11d]"></a>osSemCreate</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, los_sem.o(i.osSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[422]"></a>osSemInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[42f]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, los_slab.o(i.osSlabAllocatorAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[431]"></a>osSlabAllocatorFree</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, los_slab.o(i.osSlabAllocatorFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[435]"></a>osSlabAllocatorNew</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, los_slab.o(i.osSlabAllocatorNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSlabAllocatorNew &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HeapAlloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[437]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabBlockHeadFill))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[436]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabCtrlHdrGet))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[109]"></a>osSlabMemAlloc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osSlabMemAlloc &rArr; osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[10c]"></a>osSlabMemFree</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, los_slabmem.o(i.osSlabMemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[10e]"></a>osSlabMemInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osSlabMemInit &rArr; osSlabAllocatorNew &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[425]"></a>osSwTmrInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[43b]"></a>osSwTmrStart</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[4c]"></a>osSwTmrTask</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[438]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[43c]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[131]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[50]"></a>osTaskEntry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; osTaskSelfDelete &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[4f]"></a>osTaskExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[420]"></a>osTaskInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[421]"></a>osTaskMonInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.osTaskMonInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[43f]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[43d]"></a>osTaskSelfDelete</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, los_task.o(i.osTaskSelfDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osTaskSelfDelete &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
</UL>

<P><STRONG><a name="[4d]"></a>osTaskSwitchCheck</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, los_task.o(i.osTaskSwitchCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskSwitchCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osTaskMonInit)
</UL>
<P><STRONG><a name="[120]"></a>osTaskWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_task.o(i.osTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[123]"></a>osTaskWake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_task.o(i.osTaskWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[4e]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw_tick.o(i.osTickStart)
</UL>
<P><STRONG><a name="[427]"></a>osTickStart</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, los_hw_tick.o(i.osTickStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[440]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
</UL>

<P><STRONG><a name="[441]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[426]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[12d]"></a>osTskStackInit</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1df]"></a>pbuf_alloc</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[442]"></a>pbuf_cat</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[443]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[48a]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[25c]"></a>pbuf_copy</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1f4]"></a>pbuf_copy_partial</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1e9]"></a>pbuf_free</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[257]"></a>pbuf_header</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1e6]"></a>pbuf_realloc</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[25d]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1b3]"></a>platform_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cloud.o(i.platform_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = platform_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_test
</UL>

<P><STRONG><a name="[1b1]"></a>platform_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cloud.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = platform_init &rArr; setRTCTimeDateFromNetwork &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_test
</UL>

<P><STRONG><a name="[2a3]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[44b]"></a>setRTCTimeDateFromNetwork</STRONG> (Thumb, 1480 bytes, Stack size 1112 bytes, timedate.o(i.setRTCTimeDateFromNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = setRTCTimeDateFromNetwork &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1b2]"></a>subscribe_publish_sensor_values</STRONG> (Thumb, 608 bytes, Stack size 5032 bytes, aws_subscribe_publish_sensor_values.o(i.subscribe_publish_sensor_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 5420<LI>Call Chain = subscribe_publish_sensor_values &rArr; aws_iot_mqtt_yield &rArr; _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_autoreconnect_set_status
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_test
</UL>

<P><STRONG><a name="[473]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; LOS_QueueRead &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[40c]"></a>sys_arch_sem_wait</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[2b1]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[474]"></a>sys_mbox_new</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[475]"></a>sys_mbox_trypost</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; LOS_QueueWrite &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[49e]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[40f]"></a>sys_sem_new</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[40e]"></a>sys_sem_signal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[2ad]"></a>sys_thread_new</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1a0]"></a>sys_timeout</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[2b8]"></a>sys_timeouts_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[476]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; LOS_QueueRead &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[477]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[478]"></a>tcp_abandon</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[417]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[47c]"></a>tcp_alloc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[480]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[488]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[489]"></a>tcp_enqueue_flags</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[48b]"></a>tcp_fasttmr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2b7]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_input</STRONG> (Thumb, 1690 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[490]"></a>tcp_keepalive</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[47f]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[485]"></a>tcp_output</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[482]"></a>tcp_pcb_purge</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[479]"></a>tcp_pcb_remove</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[48c]"></a>tcp_process_refused_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[54]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[499]"></a>tcp_recved</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[496]"></a>tcp_rexmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[497]"></a>tcp_rexmit_fast</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[49a]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[47b]"></a>tcp_rst</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[487]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[47a]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[493]"></a>tcp_send_empty_ack</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[484]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[49b]"></a>tcp_slowtmr</STRONG> (Thumb, 1396 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[483]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[49d]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[498]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[49c]"></a>tcp_zero_window_probe</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[135]"></a>tcpip_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[f]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; LOS_QueueWrite &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[1fc]"></a>udp_bind</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[1fd]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[2b6]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2a4]"></a>udp_input</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1fb]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[1fe]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[1fa]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[208]"></a>udp_sendto</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[1e7]"></a>udp_sendto_if</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[154]"></a>TIM3_Config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, main.o(i.TIM3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[153]"></a>SetSysClock</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[df]"></a>ETH_GPIO_Config</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, lan8742a.o(i.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_GPIO_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[e0]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[150]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[151]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[439]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[43a]"></a>osSwtmrDelete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[107]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[12b]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[12c]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[43e]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[106]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>

<P><STRONG><a name="[429]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[428]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[42c]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[110]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[111]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[42b]"></a>osQueueBufferOperate</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, los_queue.o(i.osQueueBufferOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osQueueBufferOperate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[114]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, los_queue.o(i.osQueueReadParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[118]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, los_queue.o(i.osQueueWriteParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[42e]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
</UL>

<P><STRONG><a name="[122]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[42d]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[56]"></a>tcpip_thread</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[1d4]"></a>dhcp_bind</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1d9]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1de]"></a>dhcp_create_msg</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1d3]"></a>dhcp_decline</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[1e8]"></a>dhcp_delete_msg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1ea]"></a>dhcp_discover</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[1ee]"></a>dhcp_handle_ack</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1f0]"></a>dhcp_handle_nak</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1f1]"></a>dhcp_handle_offer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1e1]"></a>dhcp_option</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1e2]"></a>dhcp_option_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_byte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1e4]"></a>dhcp_option_long</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_long &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1eb]"></a>dhcp_option_short</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_short &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1e5]"></a>dhcp_option_trailer</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1f3]"></a>dhcp_parse_reply</STRONG> (Thumb, 1334 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1f5]"></a>dhcp_rebind</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[1f6]"></a>dhcp_reboot</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[19]"></a>dhcp_recv</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[1f2]"></a>dhcp_select</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[1d8]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[1dd]"></a>dhcp_t1_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1dc]"></a>dhcp_t2_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1ed]"></a>dhcp_timeout</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[200]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[201]"></a>dns_check_entry</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[206]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[207]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(i.dns_parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[1c]"></a>dns_recv</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[202]"></a>dns_send</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[40d]"></a>plug_holes</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[481]"></a>tcp_close_shutdown</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[47e]"></a>tcp_kill_prio</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[47d]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[48e]"></a>tcp_listen_input</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[492]"></a>tcp_parseopt</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[48f]"></a>tcp_process</STRONG> (Thumb, 1664 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[495]"></a>tcp_receive</STRONG> (Thumb, 2168 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[48d]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[486]"></a>tcp_create_segment</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[491]"></a>tcp_output_alloc_header</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[494]"></a>tcp_output_segment</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[15]"></a>arp_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.arp_timer)
</UL>
<P><STRONG><a name="[1a]"></a>dhcp_timer_coarse</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dhcp_timer_coarse)
</UL>
<P><STRONG><a name="[1b]"></a>dhcp_timer_fine</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dhcp_timer_fine)
</UL>
<P><STRONG><a name="[1d]"></a>dns_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.dns_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dns_timer)
</UL>
<P><STRONG><a name="[55]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[4a0]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[26e]"></a>icmp_send_response</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[274]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[252]"></a>etharp_arp_input</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[256]"></a>etharp_find_entry</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[255]"></a>etharp_free_entry</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[259]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[25e]"></a>etharp_raw</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[25a]"></a>etharp_send_ip</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etharp_send_ip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[253]"></a>etharp_update_arp_entry</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[16]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernetif.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.arp_timer)
<LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[32]"></a>ethernetif_input</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init)
</UL>
<P><STRONG><a name="[262]"></a>low_level_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = low_level_init &rArr; sys_thread_new &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; LOS_MemAlloc &rArr; LOS_HeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[263]"></a>low_level_input</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame_interrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[1f]"></a>low_level_output</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = low_level_output &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[183]"></a>_aws_iot_mqtt_internal_decode_packet_remaining_len</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, aws_iot_mqtt_client_common_internal.o(i._aws_iot_mqtt_internal_decode_packet_remaining_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _aws_iot_mqtt_internal_decode_packet_remaining_len
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[175]"></a>_aws_iot_mqtt_internal_deliver_message</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, aws_iot_mqtt_client_common_internal.o(i._aws_iot_mqtt_internal_deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _aws_iot_mqtt_internal_deliver_message &rArr; _aws_iot_mqtt_internal_is_topic_matched
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_is_topic_matched
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[17b]"></a>_aws_iot_mqtt_internal_handle_publish</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, aws_iot_mqtt_client_common_internal.o(i._aws_iot_mqtt_internal_handle_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>

<P><STRONG><a name="[178]"></a>_aws_iot_mqtt_internal_is_topic_matched</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, aws_iot_mqtt_client_common_internal.o(i._aws_iot_mqtt_internal_is_topic_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _aws_iot_mqtt_internal_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>

<P><STRONG><a name="[182]"></a>_aws_iot_mqtt_internal_read_packet</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, aws_iot_mqtt_client_common_internal.o(i._aws_iot_mqtt_internal_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _aws_iot_mqtt_internal_read_packet &rArr; _aws_iot_mqtt_internal_decode_packet_remaining_len
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_decode_packet_remaining_len
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>

<P><STRONG><a name="[193]"></a>_aws_iot_get_connect_packet_length</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_get_connect_packet_length))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[161]"></a>_aws_iot_mqtt_deserialize_connack</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_mqtt_deserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _aws_iot_mqtt_deserialize_connack &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[16e]"></a>_aws_iot_mqtt_internal_connect</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_mqtt_internal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _aws_iot_mqtt_internal_connect &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
</UL>

<P><STRONG><a name="[1a4]"></a>_aws_iot_mqtt_is_client_state_valid_for_connect</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_mqtt_is_client_state_valid_for_connect))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
</UL>

<P><STRONG><a name="[171]"></a>_aws_iot_mqtt_serialize_connect</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, aws_iot_mqtt_client_connect.o(i._aws_iot_mqtt_serialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _aws_iot_mqtt_serialize_connect &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_get_connect_packet_length
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[17e]"></a>_aws_iot_mqtt_internal_publish</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, aws_iot_mqtt_client_publish.o(i._aws_iot_mqtt_internal_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
</UL>

<P><STRONG><a name="[180]"></a>_aws_iot_mqtt_internal_serialize_publish</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, aws_iot_mqtt_client_publish.o(i._aws_iot_mqtt_internal_serialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _aws_iot_mqtt_internal_serialize_publish &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[192]"></a>_aws_iot_mqtt_read_string_with_len</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aws_iot_mqtt_client_publish.o(i._aws_iot_mqtt_read_string_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[164]"></a>_aws_iot_mqtt_deserialize_suback</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, aws_iot_mqtt_client_subscribe.o(i._aws_iot_mqtt_deserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _aws_iot_mqtt_deserialize_suback &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
</UL>

<P><STRONG><a name="[186]"></a>_aws_iot_mqtt_get_free_message_handler_index</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, aws_iot_mqtt_client_subscribe.o(i._aws_iot_mqtt_get_free_message_handler_index))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
</UL>

<P><STRONG><a name="[185]"></a>_aws_iot_mqtt_internal_resubscribe</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, aws_iot_mqtt_client_subscribe.o(i._aws_iot_mqtt_internal_resubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_get_free_message_handler_index
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
</UL>

<P><STRONG><a name="[18e]"></a>_aws_iot_mqtt_internal_subscribe</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, aws_iot_mqtt_client_subscribe.o(i._aws_iot_mqtt_internal_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_get_free_message_handler_index
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
</UL>

<P><STRONG><a name="[187]"></a>_aws_iot_mqtt_serialize_subscribe</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, aws_iot_mqtt_client_subscribe.o(i._aws_iot_mqtt_serialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _aws_iot_mqtt_serialize_subscribe &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
</UL>

<P><STRONG><a name="[168]"></a>_aws_iot_mqtt_force_client_disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aws_iot_mqtt_client_yield.o(i._aws_iot_mqtt_force_client_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _aws_iot_mqtt_force_client_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
</UL>

<P><STRONG><a name="[166]"></a>_aws_iot_mqtt_handle_disconnect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aws_iot_mqtt_client_yield.o(i._aws_iot_mqtt_handle_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _aws_iot_mqtt_handle_disconnect &rArr; aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_force_client_disconnect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
</UL>

<P><STRONG><a name="[169]"></a>_aws_iot_mqtt_handle_reconnect</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, aws_iot_mqtt_client_yield.o(i._aws_iot_mqtt_handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
</UL>

<P><STRONG><a name="[18f]"></a>_aws_iot_mqtt_internal_yield</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, aws_iot_mqtt_client_yield.o(i._aws_iot_mqtt_internal_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
</UL>

<P><STRONG><a name="[191]"></a>_aws_iot_mqtt_keep_alive</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, aws_iot_mqtt_client_yield.o(i._aws_iot_mqtt_keep_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _aws_iot_mqtt_keep_alive &rArr; _aws_iot_mqtt_handle_disconnect &rArr; aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
</UL>

<P><STRONG><a name="[28]"></a>_iot_tls_verify_cert</STRONG> (Thumb, 36 bytes, Stack size 1048 bytes, aws_network_st_wrapper.o(i._iot_tls_verify_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = _iot_tls_verify_cert &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
</UL>
<P><STRONG><a name="[25]"></a>my_debug</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, aws_network_st_wrapper.o(i.my_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = my_debug &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_network_st_wrapper.o(i.iot_tls_connect)
</UL>
<P><STRONG><a name="[52]"></a>disconnectCallbackHandler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aws_subscribe_publish_sensor_values.o(i.disconnectCallbackHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = disconnectCallbackHandler &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_is_autoreconnect_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_subscribe_publish_sensor_values.o(i.subscribe_publish_sensor_values)
</UL>
<P><STRONG><a name="[2bb]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[2be]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[326]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_clz))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[31a]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_int_div_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[32c]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
</UL>

<P><STRONG><a name="[330]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(i.mpi_get_digit))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[329]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[32a]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[32b]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[32f]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>

<P><STRONG><a name="[331]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[1ad]"></a>ccm_auth_crypt</STRONG> (Thumb, 860 bytes, Stack size 120 bytes, ccm.o(i.ccm_auth_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[2c9]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ccm.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[2d7]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>

<P><STRONG><a name="[57]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>aes_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>aes_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(i.ccm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>ccm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(i.ccm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccm_ctx_alloc &rArr; mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ccm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.ccm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>des3_crypt_ecb_wrap</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cipher_wrap.o(i.des3_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des3_crypt_ecb_wrap &rArr; mbedtls_des3_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>des3_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(i.des3_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = des3_ctx_alloc &rArr; mbedtls_des3_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>des3_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.des3_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = des3_ctx_free &rArr; mbedtls_des3_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>des3_set2key_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des3_set2key_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set2key_dec_wrap &rArr; mbedtls_des3_set2key_dec &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>des3_set2key_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des3_set2key_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set2key_enc_wrap &rArr; mbedtls_des3_set2key_enc &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>des3_set3key_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des3_set3key_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set3key_dec_wrap &rArr; mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>des3_set3key_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des3_set3key_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set3key_enc_wrap &rArr; mbedtls_des3_set3key_enc &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>des_crypt_ecb_wrap</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cipher_wrap.o(i.des_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des_crypt_ecb_wrap &rArr; mbedtls_des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>des_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(i.des_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = des_ctx_alloc &rArr; mbedtls_des_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>des_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.des_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = des_ctx_free &rArr; mbedtls_des_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>des_setkey_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des_setkey_dec_wrap &rArr; mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>des_setkey_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(i.des_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = des_setkey_enc_wrap &rArr; mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>gcm_ctx_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>gcm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>block_cipher_df</STRONG> (Thumb, 292 bytes, Stack size 840 bytes, ctr_drbg.o(i.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[1b7]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ctr_drbg.o(i.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[2da]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>

<P><STRONG><a name="[1b8]"></a>debug_print_line_by_line</STRONG> (Thumb, 96 bytes, Stack size 552 bytes, debug.o(i.debug_print_line_by_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = debug_print_line_by_line &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[1ba]"></a>debug_print_pk</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, debug.o(i.debug_print_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[1b9]"></a>debug_send_line</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, debug.o(i.debug_send_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = debug_send_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
</UL>

<P><STRONG><a name="[1c6]"></a>des3_set2key</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, des.o(i.des3_set2key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
</UL>

<P><STRONG><a name="[1ca]"></a>des3_set3key</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, des.o(i.des3_set3key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
</UL>

<P><STRONG><a name="[2e3]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, des.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
</UL>

<P><STRONG><a name="[1be]"></a>derive_mpi</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ecdsa.o(i.derive_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[20d]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 140 bytes, Stack size 176 bytes, ecdsa.o(i.ecdsa_signature_to_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[216]"></a>ecp_add_mixed</STRONG> (Thumb, 1378 bytes, Stack size 112 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[223]"></a>ecp_check_pubkey_mx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ecp.o(i.ecp_check_pubkey_mx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecp_check_pubkey_mx &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[225]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[227]"></a>ecp_comb_fixed</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ecp.o(i.ecp_comb_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[229]"></a>ecp_double_add_mxz</STRONG> (Thumb, 1226 bytes, Stack size 144 bytes, ecp.o(i.ecp_double_add_mxz))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ecp_double_add_mxz &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[21d]"></a>ecp_double_jac</STRONG> (Thumb, 1528 bytes, Stack size 72 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[2fc]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[21b]"></a>ecp_modp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[238]"></a>ecp_mul_comb</STRONG> (Thumb, 440 bytes, Stack size 360 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[23b]"></a>ecp_mul_comb_core</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[243]"></a>ecp_mul_mxz</STRONG> (Thumb, 382 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_mxz))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ecp_mul_mxz &rArr; ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[23d]"></a>ecp_normalize_jac</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[248]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 760 bytes, Stack size 64 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[246]"></a>ecp_normalize_mxz</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ecp.o(i.ecp_normalize_mxz))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecp_normalize_mxz &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[239]"></a>ecp_precompute_comb</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[242]"></a>ecp_randomize_jac</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[244]"></a>ecp_randomize_mxz</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, ecp.o(i.ecp_randomize_mxz))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[23c]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[240]"></a>ecp_select_comb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[305]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[303]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>

<P><STRONG><a name="[234]"></a>add32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(i.add32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
</UL>

<P><STRONG><a name="[231]"></a>add64</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp_curves.o(i.add64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add64
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
</UL>

<P><STRONG><a name="[232]"></a>carry64</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ecp_curves.o(i.carry64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = carry64
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
</UL>

<P><STRONG><a name="[22b]"></a>ecp_group_load</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[22e]"></a>ecp_mod_koblitz</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_koblitz))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224k1
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192k1
</UL>

<P><STRONG><a name="[34]"></a>ecp_mod_p192</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ecp_curves.o(i.ecp_mod_p192))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecp_mod_p192 &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry64
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[39]"></a>ecp_mod_p192k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p192k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p192k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[35]"></a>ecp_mod_p224</STRONG> (Thumb, 674 bytes, Stack size 80 bytes, ecp_curves.o(i.ecp_mod_p224))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p224 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[3a]"></a>ecp_mod_p224k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p224k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p224k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[3c]"></a>ecp_mod_p255</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, ecp_curves.o(i.ecp_mod_p255))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p255 &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[36]"></a>ecp_mod_p256</STRONG> (Thumb, 1184 bytes, Stack size 80 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[3b]"></a>ecp_mod_p256k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[37]"></a>ecp_mod_p384</STRONG> (Thumb, 1524 bytes, Stack size 96 bytes, ecp_curves.o(i.ecp_mod_p384))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[38]"></a>ecp_mod_p521</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_p521))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_mod_p521 &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[22c]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[24b]"></a>ecp_use_curve25519</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_use_curve25519))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[235]"></a>fix_negative</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ecp_curves.o(i.fix_negative))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
</UL>

<P><STRONG><a name="[233]"></a>sub32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
</UL>

<P><STRONG><a name="[24e]"></a>entropy_gather_internal</STRONG> (Thumb, 168 bytes, Stack size 160 bytes, entropy.o(i.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[24f]"></a>entropy_update</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, entropy.o(i.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[308]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, entropy.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
</UL>

<P><STRONG><a name="[269]"></a>gcm_gen_table</STRONG> (Thumb, 402 bytes, Stack size 80 bytes, gcm.o(i.gcm_gen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[30e]"></a>gcm_mult</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[30b]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>

<P><STRONG><a name="[310]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>

<P><STRONG><a name="[323]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[74]"></a>md5_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.md5_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>md5_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = md5_ctx_alloc &rArr; mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>md5_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = md5_ctx_free &rArr; mbedtls_md5_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>md5_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.md5_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>md5_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.md5_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>md5_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(i.md5_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>md5_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.md5_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ripemd160_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.ripemd160_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ripemd160_clone_wrap &rArr; mbedtls_ripemd160_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ripemd160_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.ripemd160_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ripemd160_ctx_alloc &rArr; mbedtls_ripemd160_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ripemd160_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.ripemd160_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ripemd160_ctx_free &rArr; mbedtls_ripemd160_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ripemd160_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.ripemd160_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ripemd160_finish_wrap &rArr; mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ripemd160_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.ripemd160_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ripemd160_process_wrap &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ripemd160_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(i.ripemd160_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ripemd160_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.ripemd160_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ripemd160_update_wrap &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>sha1_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>sha1_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>sha384_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>sha384_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_ctx_alloc &rArr; mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>sha384_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha384_ctx_free &rArr; mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>sha384_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>sha384_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>sha384_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>sha384_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>sha384_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>sha512_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha512_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>sha512_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[321]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md5.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>

<P><STRONG><a name="[337]"></a>oid_cipher_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_cipher_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_cipher_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
</UL>

<P><STRONG><a name="[33b]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_ext_key_usage_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[339]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_grp_id_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[33d]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_md_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[33f]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_pk_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[341]"></a>oid_pkcs12_pbe_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_pkcs12_pbe_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pkcs12_pbe_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
</UL>

<P><STRONG><a name="[343]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[346]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_x509_ext_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[335]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_x520_attr_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[348]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pem.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>

<P><STRONG><a name="[34c]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_get_len &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[34b]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[35b]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[b0]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ecdsa_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ecdsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pk_wrap.o(i.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, pk_wrap.o(i.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>eckey_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>eckey_can_do</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>eckey_check_pair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>eckey_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>eckey_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>eckey_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>eckey_sign_wrap</STRONG> (Thumb, 72 bytes, Stack size 232 bytes, pk_wrap.o(i.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 216 bytes, pk_wrap.o(i.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>eckeydh_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>rsa_alloc_wrap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>rsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>rsa_get_bitlen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>rsa_sign_wrap</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>rsa_verify_wrap</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2648<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[36c]"></a>pkcs5_parse_pbkdf2_params</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, pkcs5.o(i.pkcs5_parse_pbkdf2_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = pkcs5_parse_pbkdf2_params &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[367]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pkcs12.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[362]"></a>pkcs12_fill_buffer</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pkcs12.o(i.pkcs12_fill_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pkcs12_fill_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[449]"></a>pkcs12_parse_pbe_params</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pkcs12.o(i.pkcs12_parse_pbe_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pkcs12_parse_pbe_params &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
</UL>

<P><STRONG><a name="[36a]"></a>pkcs12_pbe_derive_key_iv</STRONG> (Thumb, 204 bytes, Stack size 336 bytes, pkcs12.o(i.pkcs12_pbe_derive_key_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = pkcs12_pbe_derive_key_iv &rArr; mbedtls_pkcs12_derivation &rArr; pkcs12_fill_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[444]"></a>pk_get_ecparams</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pk_get_ecparams &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[359]"></a>pk_get_ecpubkey</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[356]"></a>pk_get_pk_alg</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[357]"></a>pk_get_rsapubkey</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[445]"></a>pk_group_from_specified</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, pkparse.o(i.pk_group_from_specified))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pk_group_from_specified &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
</UL>

<P><STRONG><a name="[446]"></a>pk_group_id_from_group</STRONG> (Thumb, 200 bytes, Stack size 152 bytes, pkparse.o(i.pk_group_id_from_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
</UL>

<P><STRONG><a name="[447]"></a>pk_group_id_from_specified</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, pkparse.o(i.pk_group_id_from_specified))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[351]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, pkparse.o(i.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[354]"></a>pk_parse_key_pkcs8_encrypted_der</STRONG> (Thumb, 404 bytes, Stack size 2144 bytes, pkparse.o(i.pk_parse_key_pkcs8_encrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 3952<LI>Call Chain = pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[353]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, pkparse.o(i.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[352]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, pkparse.o(i.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[358]"></a>pk_use_ecparams</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[374]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ripemd160.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
</UL>

<P><STRONG><a name="[38c]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[38b]"></a>mgf_mask</STRONG> (Thumb, 138 bytes, Stack size 120 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[389]"></a>rsa_prepare_blinding</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[394]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha1.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[39d]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[3a2]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha512.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>

<P><STRONG><a name="[462]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[457]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_cli.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[454]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_cli.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
</UL>

<P><STRONG><a name="[44c]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_check_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[463]"></a>ssl_generate_random</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_generate_random
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[451]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[3c0]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[452]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_parse_extended_ms_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[453]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_parse_max_fragment_length_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[3c7]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_new_session_ticket))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[456]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[458]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[3bd]"></a>ssl_parse_server_hello</STRONG> (Thumb, 3142 bytes, Stack size 80 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c1]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3bf]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 1358 bytes, Stack size 136 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[45a]"></a>ssl_parse_session_ticket_ext</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_session_ticket_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_parse_session_ticket_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[45c]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_signature_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_parse_signature_algorithm &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[45b]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[459]"></a>ssl_parse_truncated_hmac_ext</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_truncated_hmac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_parse_truncated_hmac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[461]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_alpn_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[3c4]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3bc]"></a>ssl_write_client_hello</STRONG> (Thumb, 1492 bytes, Stack size 64 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[3c3]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46d]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_write_encrypted_pms))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_debug_print_ret &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[46b]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_extended_ms_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[464]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_hostname_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_hostname_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[469]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_max_fragment_length_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[465]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_renegotiation_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_renegotiation_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[46c]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_session_ticket_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_session_ticket_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[466]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_signature_algorithms_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[467]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[468]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[46a]"></a>ssl_write_truncated_hmac_ext</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_truncated_hmac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_truncated_hmac_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[3b7]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3df]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_own_cert))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[3ae]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[3a9]"></a>ssl_append_key_cert</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_append_key_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[42]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 190 bytes, Stack size 184 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[3f]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 190 bytes, Stack size 312 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[41]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[3e]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 104 bytes, Stack size 248 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[3d1]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_check_ctr_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[3b2]"></a>ssl_check_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_check_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[44d]"></a>ssl_decrypt_buf</STRONG> (Thumb, 734 bytes, Stack size 96 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[3e1]"></a>ssl_encrypt_buf</STRONG> (Thumb, 588 bytes, Stack size 80 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[3dc]"></a>ssl_handshake_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[44f]"></a>ssl_handshake_params_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_handshake_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[3cb]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[3ad]"></a>ssl_key_cert_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_key_cert_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[3d7]"></a>ssl_parse_record_header</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[3d8]"></a>ssl_prepare_record_content</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_prepare_record_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[3d2]"></a>ssl_set_timer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[3d3]"></a>ssl_start_renegotiation</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_start_renegotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3168<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>

<P><STRONG><a name="[44e]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[44]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[43]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[51]"></a>ssl_update_checksum_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_params_init)
</UL>
<P><STRONG><a name="[3de]"></a>ssl_write_real</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_write_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[49f]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 264 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[40]"></a>tls_prf_sha256</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[3d]"></a>tls_prf_sha384</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(i.tls_prf_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[4b1]"></a>x509_date_is_valid</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, x509.o(i.x509_date_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[405]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[407]"></a>x509_get_hash_alg</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, x509.o(i.x509_get_hash_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_hash_alg &rArr; mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[4b0]"></a>x509_parse_int</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[409]"></a>x509_parse_time</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, x509.o(i.x509_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[3e2]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x509_crl.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
</UL>

<P><STRONG><a name="[3e6]"></a>x509_crl_get_version</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, x509_crl.o(i.x509_crl_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crl_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[4aa]"></a>x509_get_crl_entry_ext</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, x509_crl.o(i.x509_get_crl_entry_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_crl_entry_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[3ec]"></a>x509_get_crl_ext</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, x509_crl.o(i.x509_get_crl_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_crl_ext &rArr; mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3eb]"></a>x509_get_entries</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, x509_crl.o(i.x509_get_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = x509_get_entries &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_entry_ext
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3ee]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x509_crt.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[3fc]"></a>x509_check_wildcard</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(i.x509_check_wildcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[400]"></a>x509_crt_check_parent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[3fa]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 798 bytes, Stack size 80 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[402]"></a>x509_crt_verify_child</STRONG> (Thumb, 548 bytes, Stack size 152 bytes, x509_crt.o(i.x509_crt_verify_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 2944 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[401]"></a>x509_crt_verify_top</STRONG> (Thumb, 496 bytes, Stack size 152 bytes, x509_crt.o(i.x509_crt_verify_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4a8]"></a>x509_crt_verifycrl</STRONG> (Thumb, 268 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[4a9]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4a5]"></a>x509_get_crt_ext</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a3]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_dates))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4ac]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_ext_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4ab]"></a>x509_get_key_usage</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509_crt.o(i.x509_get_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4ae]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_ns_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4ad]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4a4]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a2]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[3f5]"></a>x509_info_cert_type</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3f7]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, x509_crt.o(i.x509_info_ext_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = x509_info_ext_key_usage &rArr; mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3f6]"></a>x509_info_key_usage</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3f4]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(i.x509_info_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_info_subject_alt_name
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[3fb]"></a>x509_memcasecmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4a1]"></a>x509_name_cmp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[3ff]"></a>x509_profile_check_key</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4a7]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[3fe]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4af]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(i.x509_string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[275]"></a>internal_close</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, net_tls_mbedtls.o(i.internal_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = internal_close &rArr; mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[4a]"></a>my_debug</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, net_tls_mbedtls.o(i.my_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = my_debug &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[194]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[198]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[197]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[14]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
